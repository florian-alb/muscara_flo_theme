{% assign bundle_1 = product.metafields.flo_product_bundle.product_bundle_1.value %}
<form id="bundle-form">
  <div class="flo_bundles">
    {% for metaobject in bundle_1 %}
      {% assign quantity = metaobject.variant_quantity | times: 1 %}
      {% for product_quantity in (1..quantity) %}
        <div class="flo_bundles_offer_selector">
          <span class="custom_bundle_product_handle">
            {{ metaobject.product_title.value }}
            {% if forloop.length > 1 %}{{ forloop.index }}{% endif %}
          </span>

          <select class="custom_select" name="id">
            {% for variant in metaobject.product_variants.value %}
              {% if variant.available %}
                <option value="{{ variant.id }}">
                  {{ variant.title }}
                </option>
              {% endif %}
            {% endfor %}
          </select>
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <button type="submit" id="add-bundle-button">Add Bundle to Cart</button>
  v-3
</form>
<script>
  const classes$W = {
    quickViewVisible: 'js-quick-view-visible',
    cartDrawerOpen: 'js-drawer-open-cart',
  };

  const selectors$G = {
    outerSection: '[data-section-id]',
    aos: '[data-aos]',
    additionalCheckoutButtons: '[data-additional-checkout-button]',
    apiContent: '[data-api-content]',
    apiLineItems: '[data-api-line-items]',
    apiUpsellItems: '[data-api-upsell-items]',
    apiCartPrice: '[data-api-cart-price]',
    buttonAddToCart: '[data-add-to-cart]',
    upsellButtonByHandle: '[data-handle]',
    cartCloseError: '[data-cart-error-close]',
    cartDrawer: '[data-cart-drawer]',
    cartDrawerTemplate: '[data-cart-drawer-template]',
    cartDrawerToggle: '[data-cart-drawer-toggle]',
    cartDrawerBody: '[data-cart-drawer-body]',
    cartErrors: '[data-cart-errors]',
    cartForm: '[data-cart-form]',
    cartTermsCheckbox: '[data-cart-acceptance-checkbox]',
    cartCheckoutButtonWrapper: '[data-cart-checkout-buttons]',
    cartCheckoutButton: '[data-cart-checkout-button]',
    cartItemRemove: '[data-item-remove]',
    cartItemsQty: '[data-cart-items-qty]',
    cartTotal: '[data-cart-total]',
    cartTotalPrice: '[data-cart-total-price]',
    cartMessage: '[data-cart-message]',
    cartMessageDefault: '[data-message-default]',
    cartPage: '[data-cart-page]',
    cartProgress: '[data-cart-message-progress]',
    emptyMessage: '[data-empty-message]',
    buttonHolder: '[data-foot-holder]',
    item: '[data-cart-item]',
    itemsHolder: '[data-items-holder]',
    itemsWrapper: '[data-items-wrapper]',
    formCloseError: '[data-close-error]',
    formErrorsContainer: '[data-cart-errors-container]',
    upsellHolder: '[data-upsell-holder]',
    errorMessage: '[data-error-message]',
    termsErrorMessage: '[data-terms-error-message]',
    pairProductsHolder: '[data-pair-products-holder]',
    pairProducts: '[data-pair-products]',
    priceHolder: '[data-cart-price-holder]',
    leftToSpend: '[data-left-to-spend]',
    quickBuyForm: '[data-quickbuy-form]',
    qtyInput: '[data-quantity-field]',
    productMediaContainer: '[data-product-media-container]',
    formWrapper: '[data-form-wrapper]',
    productForm: '[data-product-form]',
    popupQuickView: '.popup-quick-view',
    popupClose: '[data-popup-close]',
    error: '[data-error]',
    quickViewOnboarding: '[data-quick-view-onboarding]',
    flickityEnabled: '.flickity-enabled',
  };

  function build(data) {
    const cartItemsData = data.querySelector(selectors$G.apiLineItems);
    const upsellItemsData = data.querySelector(selectors$G.apiUpsellItems);
    const cartEmptyData = Boolean(cartItemsData === null && upsellItemsData === null);
    const priceData = data.querySelector(selectors$G.apiCartPrice);
    const cartTotal = data.querySelector(selectors$G.cartTotal);

    if (this.priceHolder && priceData) {
      this.priceHolder.innerHTML = priceData.innerHTML;
    }

    // Cart page empty state animations re-init
    this.emptyMessage.querySelectorAll(selectors$G.aos).forEach((item) => {
      item.classList.remove(classes$w.aosAnimate);
    });

    if (cartEmptyData) {
      this.itemsHolder.innerHTML = '';

      if (this.pairProductsHolder) {
        this.pairProductsHolder.innerHTML = '';
      }
    } else {
      this.itemsHolder.innerHTML = cartItemsData.innerHTML;

      if (this.pairProductsHolder) {
        this.pairProductsHolder.innerHTML = upsellItemsData.innerHTML;
      }

      this.renderPairProducts();
    }

    this.newTotalItems =
      cartItemsData && cartItemsData.querySelectorAll(selectors$G.item).length
        ? cartItemsData.querySelectorAll(selectors$G.item).length
        : 0;
    this.subtotal =
      cartTotal && cartTotal.hasAttribute(attributes$r.cartTotal)
        ? parseInt(cartTotal.getAttribute(attributes$r.cartTotal))
        : 0;
    this.cartCount = this.getCartItemCount();

    if (this.cartMessage.length > 0) {
      this.updateProgress();
    }

    this.cartToggleButtons.forEach((button) => {
      button.classList.remove(classes$w.cartItems);

      if (this.newTotalItems > 0) {
        button.classList.add(classes$w.cartItems);
      }
    });

    this.toggleErrorMessage();
    this.updateItemsQuantity(this.cartCount);

    // Update cart total price
    this.cartTotalPrice.innerHTML =
      this.subtotal === 0
        ? window.theme.strings.free
        : themeCurrency.formatMoney(this.subtotal, theme.moneyWithCurrencyFormat);

    if (this.totalItems !== this.newTotalItems) {
      this.totalItems = this.newTotalItems;

      this.toggleClassesOnContainers();
    }

    // Add class "is-updated" line items holder to reduce cart items animation delay via CSS variables
    if (this.isCartDrawerOpen) {
      this.itemsHolder.classList.add(classes$w.updated);
    }

    this.cartEvents();
    this.initQuantity();
    this.enableCartButtons();
    this.resetButtonClasses();
    this.removeLoadingClass();

    document.dispatchEvent(new CustomEvent('theme:cart:added', { bubbles: true }));

    if (this.cartDrawer) {
      this.openCartDrawer();
    }
  }

  function getCart() {
    // Render cart drawer if it exists but it's not loaded yet
    if (this.cartDrawer && !this.isCartDrawerLoaded) {
      const alwaysOpen = false;
      this.renderCartDrawer(alwaysOpen);
    }

    fetch(theme.routes.cart_url + '?section_id=api-cart-items')
      .then(this.handleErrors)
      .then((response) => response.text())
      .then((response) => {
        const element = document.createElement('div');
        element.innerHTML = response;

        const cleanResponse = element.querySelector('[data-api-content]');
        console.log('cleanResponse', cleanResponse);
        this.build(cleanResponse);
      })
      .catch((error) => console.log(error));
  }

  document.addEventListener('DOMContentLoaded', function () {
    const bundleForm = document.getElementById('bundle-form');

    bundleForm.addEventListener('submit', async function (event) {
      event.preventDefault(); // Prevent page reload

      const formData = new FormData(event.target);
      const itemsToAdd = formData.getAll('id').map((id) => ({ id, quantity: 1 }));

      try {
        // Add all items to the cart using Shopify's AJAX API
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ items: itemsToAdd }),
        });

        if (!response.ok) {
          throw new Error(`Failed to add items: ${response.statusText}`);
        }

        // Fetching the updated cart data
        const res = getCart();
        console.log('Cart :', res);
        const cartResponse = await fetch('/cart.js');
        const cartData = await cartResponse.json();
        console.log('Cart updated:', cartData);

        // Open the cart drawer
        const cartDrawerBtn = document.querySelector('a.navlink.navlink--icon.cart__toggle.cart__toggle--has-items');
        if (cartDrawerBtn) cartDrawerBtn.click();
      } catch (error) {
        console.error('Error adding items to cart:', error);
      }
    });
  });
</script>

{% style %}
  .flo_bundles {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .flo_bundles_offer_slector {
    border: 2px solid #de9fc2;
    border-radius: 5px;
    background-color: #f7e2ed;
    margin-top: 5px;
    padding: 0 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .custom_select {
    line-height: 23px;
    position: static;
    opacity: 1;
    display: block;
    background-position: right 10px center !important;
    border-radius: 3px;
    border: 1px solid #000;
    font-size: 16px;
    float: left;
    width: 200px;
    min-height: 25px;
    height: 25px;
    padding: 0 25px 0 3px;
    margin: 0;
    color: #000;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .custom_bundle_product_handle {
  }
{% endstyle %}
