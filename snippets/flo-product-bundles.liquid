{% assign bundle_1 = product.metafields.flo_product_bundle.product_bundle_1.value %}
<form id="bundle-form">
  <div class="flo_bundles">
    {% for metaobject in bundle_1 %}
      {% assign quantity = metaobject.variant_quantity | times: 1 %}
      {% for product_quantity in (1..quantity) %}
        <div class="flo_bundles_offer_selector">
          <span class="custom_bundle_product_handle">
            {{ metaobject.product_title.value }}
            {% if forloop.length > 1 %}{{ forloop.index }}{% endif %}
          </span>

          <select class="custom_select" name="items[{{ forloop.index0 }}][id]">
            {% for variant in metaobject.product_variants.value %}
              {% if variant.available %}
                <option value="{{ variant.id }}">
                  {{ variant.title }}
                </option>
              {% endif %}
            {% endfor %}
          </select>

          <input type="hidden" name="items[{{ forloop.index0 }}][quantity]" value="1">
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <button type="submit" id="add-bundle-button">Add Bundle to Cart</button>
  v-3
</form>

<script src="{{ 'theme.dev.js' | asset_url }}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function (event) {
    document.getElementById('bundle-form').addEventListener('submit', function (event) {
      event.preventDefault();
      const formData = new FormData(event.target);
      const items = [];

      // Build the items array from the form data
      for (let [key, value] of formData.entries()) {
        const match = key.match(/items\[(\d+)\]\[(id|quantity)\]/);
        if (match) {
          const index = match[1];
          const field = match[2];
          if (!items[index]) {
            items[index] = {};
          }
          items[index][field] = value;
        }
      }

      console.log('items', items);

      // Add each item to the cart using Shopify's AJAX API
      const promises = items.map((item) =>
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: item.id,
            quantity: parseInt(item.quantity, 10),
          }),
        })
      );

      // Wait for all items to be added, then open the drawer cart
      Promise.all(promises)
        .then(() => {
          window.cartDrawer.getCart();
        })
        .catch((error) => {
          console.error('Error adding bundle to cart:', error);
        });
    });
  });
</script>

{% style %}
  .flo_bundles {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .flo_bundles_offer_slector {
    border: 2px solid #de9fc2;
    border-radius: 5px;
    background-color: #f7e2ed;
    margin-top: 5px;
    padding: 0 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .custom_select {
    line-height: 23px;
    position: static;
    opacity: 1;
    display: block;
    background-position: right 10px center !important;
    border-radius: 3px;
    border: 1px solid #000;
    font-size: 16px;
    float: left;
    width: 200px;
    min-height: 25px;
    height: 25px;
    padding: 0 25px 0 3px;
    margin: 0;
    color: #000;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .custom_bundle_product_handle {
  }
{% endstyle %}
