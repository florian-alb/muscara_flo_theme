{% assign bundle_1 = product.metafields.flo_product_bundle.product_bundle_1.value %}
<form id="bundle-form">
  <div class="flo_bundles">
    {% for metaobject in bundle_1 %}
      {% assign quantity = metaobject.variant_quantity | times: 1 %}
      {% for product_quantity in (1..quantity) %}
        <div class="flo_bundles_offer_selector">
          <span class="custom_bundle_product_handle">
            {{ metaobject.product_title.value }}
            {% if forloop.length > 1 %}{{ forloop.index }}{% endif %}
          </span>

          <select class="custom_select" name="id">
            {% for variant in metaobject.product_variants.value %}
              {% if variant.available %}
                <option value="{{ variant.id }}">
                  {{ variant.title }}
                </option>
              {% endif %}
            {% endfor %}
          </select>
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <button type="submit" id="add-bundle-button">Add Bundle to Cart</button>
  v-3
</form>
<script>
document.addEventListener('DOMContentLoaded', function () {
  const bundleForm = document.getElementById('bundle-form');

  bundleForm.addEventListener('submit', async function (event) {
    event.preventDefault(); // Empêche le rechargement de la page

    const formData = new FormData(event.target);
    const itemsToAdd = formData.getAll('id').map((id) => ({ id, quantity: 1 }));

    try {
      // Ajout des articles au panier via l'API AJAX de Shopify
      const addResponse = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ items: itemsToAdd }),
      });

      if (!addResponse.ok) {
        throw new Error(`Erreur lors de l'ajout des articles : ${addResponse.statusText}`);
      }

      // Récupération des données mises à jour du panier
      const cartResponse = await fetch(`${theme.routes.cart_url}?section_id=api-cart-items`);
      const cartHTML = await cartResponse.text();

      const element = document.createElement('div');
      element.innerHTML = cartHTML;

      const cleanResponse = element.querySelector('[data-api-content]');
      if (cleanResponse) {
        updateCartUI(cleanResponse);
      } else {
        console.error('Impossible de trouver les données du panier.');
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du panier :', error);
    }
  });

  /**
   * Met à jour l'interface utilisateur du panier
   * @param {HTMLElement} data - Contenu HTML nettoyé du panier
   */
  function updateCartUI(data) {
    const selectors = {
      apiLineItems: '[data-cart-line-items]',
      apiUpsellItems: '[data-upsell-items]',
      apiCartPrice: '[data-cart-price]',
      cartTotal: '[data-cart-total]',
    };

    // Récupération des données nécessaires
    const cartItemsData = data.querySelector(selectors.apiLineItems);
    const upsellItemsData = data.querySelector(selectors.apiUpsellItems);
    const priceData = data.querySelector(selectors.apiCartPrice);
    const cartTotal = data.querySelector(selectors.cartTotal);

    // Mise à jour des éléments du DOM
    const itemsHolder = document.querySelector('[data-cart-items-holder]');
    const priceHolder = document.querySelector('[data-cart-price-holder]');
    const upsellHolder = document.querySelector('[data-upsell-holder]');
    const cartCountElement = document.querySelector('[data-cart-count]');

    if (priceHolder && priceData) {
      priceHolder.innerHTML = priceData.innerHTML;
    }

    if (cartItemsData) {
      itemsHolder.innerHTML = cartItemsData.innerHTML;
    }

    if (upsellItemsData && upsellHolder) {
      upsellHolder.innerHTML = upsellItemsData.innerHTML;
    }

    if (cartTotal) {
      const newCartCount = cartItemsData.querySelectorAll('[data-cart-item]').length || 0;
      cartCountElement.textContent = newCartCount;

      const subtotal = cartTotal.getAttribute('data-cart-total') || '0';
      document.querySelector('[data-cart-total-price]').innerHTML = themeCurrency.formatMoney(
        parseInt(subtotal, 10),
        theme.moneyWithCurrencyFormat
      );
    }

    console.log('Le panier a été mis à jour avec succès.');
  }
});
</script>

{% style %}
  .flo_bundles {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .flo_bundles_offer_slector {
    border: 2px solid #de9fc2;
    border-radius: 5px;
    background-color: #f7e2ed;
    margin-top: 5px;
    padding: 0 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .custom_select {
    line-height: 23px;
    position: static;
    opacity: 1;
    display: block;
    background-position: right 10px center !important;
    border-radius: 3px;
    border: 1px solid #000;
    font-size: 16px;
    float: left;
    width: 200px;
    min-height: 25px;
    height: 25px;
    padding: 0 25px 0 3px;
    margin: 0;
    color: #000;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .custom_bundle_product_handle {
  }
{% endstyle %}
