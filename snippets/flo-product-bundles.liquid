{% assign bundle_1 = product.metafields.flo_product_bundle.product_bundle_1.value %}
<form id="bundle-form">
  <div class="flo_bundles">
    {% for metaobject in bundle_1 %}
      {% assign quantity = metaobject.variant_quantity | times: 1 %}
      {% for product_quantity in (1..quantity) %}
        <div class="flo_bundles_offer_selector">
          <span class="custom_bundle_product_handle">
            {{ metaobject.product_title.value }}
            {% if forloop.length > 1 %}{{ forloop.index }}{% endif %}
          </span>

          <select class="custom_select" name="id">
            {% for variant in metaobject.product_variants.value %}
              {% if variant.available %}
                <option value="{{ variant.id }}">
                  {{ variant.title }}
                </option>
              {% endif %}
            {% endfor %}
          </select>
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <button type="submit" id="add-bundle-button">Add Bundle to Cart</button>
  v-3
</form>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    console.log('üöÄ DOM Content Loaded');

    const bundleForm = document.getElementById('bundle-form');
    if (!bundleForm) {
      console.error('‚ùå Formulaire bundle non trouv√©.');
      return;
    }

    console.log('‚úÖ Formulaire bundle trouv√©.');

    bundleForm.addEventListener('submit', async function (event) {
      event.preventDefault(); // Emp√™che le rechargement de la page
      console.log('üöÄ Soumission du formulaire intercept√©e.');

      const formData = new FormData(event.target);
      const itemsToAdd = formData.getAll('id').map((id) => ({ id, quantity: 1 }));

      console.log('üõí Articles √† ajouter au panier :', itemsToAdd);

      try {
        // Ajout des articles au panier via l'API AJAX de Shopify
        const addResponse = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ items: itemsToAdd }),
        });

        console.log('üì° R√©ponse de /cart/add.js re√ßue.', addResponse);

        if (!addResponse.ok) {
          throw new Error(`Erreur lors de l'ajout des articles : ${addResponse.statusText}`);
        }

        console.log('‚úÖ Articles ajout√©s avec succ√®s.');

        const rest = await fetch('/?section_id=cart');
        console.log('üöÄ ~ rest:', rest);

        // R√©cup√©ration des donn√©es mises √† jour du panier
        console.log('üì° R√©cup√©ration des donn√©es du panier...');
        const cartResponse = await fetch(`${theme.routes.cart_url}?section_id=api-cart-items`);
        console.log('üì° R√©ponse de /cart.js re√ßue.', cartResponse);

        if (!cartResponse.ok) {
          throw new Error(`Erreur lors de la r√©cup√©ration des donn√©es du panier : ${cartResponse.statusText}`);
        }

        const cartHTML = await cartResponse.text();
        console.log('üßæ Contenu HTML du panier r√©cup√©r√© :', cartHTML);

        const element = document.createElement('div');
        element.innerHTML = cartHTML;

        console.log('üîß √âl√©ment cr√©√© √† partir du HTML r√©cup√©r√©.', element);

        const cleanResponse = element.querySelector('[data-api-content]');
        if (cleanResponse) {
          console.log('‚úÖ Contenu propre trouv√© pour mise √† jour :', cleanResponse);
          updateCartUI(cleanResponse);
        } else {
          console.error('‚ùå Impossible de trouver le contenu propre du panier.');
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour du panier :', error);
      }
    });

    /**
     * Met √† jour l'interface utilisateur du panier
     * @param {HTMLElement} data - Contenu HTML nettoy√© du panier
     */
    function updateCartUI(data) {
      console.log("üîÑ Mise √† jour de l'UI du panier avec les donn√©es :", data);

      const selectors = {
        apiLineItems: '[data-api-line-items]',
        apiUpsellItems: '[data-api-upsell-items]',
        apiCartPrice: '[data-api-cart-price]',
        cartTotal: '[data-cart-total]',
      };

      // √âtape 1 : Extraire les donn√©es
      const cartItemsData = data.querySelector(selectors.apiLineItems);
      console.log('‚úÖ cartItemsData trouv√© :', cartItemsData);

      const upsellItemsData = data.querySelector(selectors.apiUpsellItems);
      console.log('‚úÖ upsellItemsData trouv√© :', upsellItemsData);

      const priceData = data.querySelector(selectors.apiCartPrice);
      console.log('‚úÖ priceData trouv√© :', priceData);

      const cartTotal = priceData?.querySelector(selectors.cartTotal);
      console.log('‚úÖ cartTotal trouv√© :', cartTotal);

      // √âtape 2 : V√©rification et mise √† jour
      const itemsHolder = document.querySelector('[data-cart-items-holder]');
      const priceHolder = document.querySelector('[data-cart-price-holder]');
      const upsellHolder = document.querySelector('[data-upsell-holder]');
      const cartCountElement = document.querySelector('[data-cart-count]');

      if (itemsHolder && cartItemsData) {
        console.log('üõçÔ∏è Mise √† jour des articles du panier.');
        itemsHolder.innerHTML = cartItemsData.innerHTML;
      }

      if (priceHolder && priceData) {
        console.log('üí∞ Mise √† jour du prix total.');
        priceHolder.innerHTML = priceData.innerHTML;
      }

      if (upsellItemsData && upsellHolder) {
        console.log('üìà Mise √† jour des produits associ√©s (upsells).');
        upsellHolder.innerHTML = upsellItemsData.innerHTML;
      }

      if (cartTotal && cartCountElement) {
        const itemCount = cartItemsData?.querySelectorAll('[data-cart-item]').length || 0;
        console.log("üî¢ Nombre d'articles mis √† jour :", itemCount);
        cartCountElement.textContent = itemCount;

        const subtotal = cartTotal.getAttribute('data-cart-total') || '0';
        console.log('üí≥ Sous-total du panier :', subtotal);

        document.querySelector('[data-cart-total-price]').innerHTML = themeCurrency.formatMoney(
          parseInt(subtotal, 10),
          theme.moneyWithCurrencyFormat
        );
      }

      console.log("‚úÖ Mise √† jour de l'UI du panier termin√©e.");
    }
  });
</script>

{% style %}
  .flo_bundles {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .flo_bundles_offer_slector {
    border: 2px solid #de9fc2;
    border-radius: 5px;
    background-color: #f7e2ed;
    margin-top: 5px;
    padding: 0 10px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .custom_select {
    line-height: 23px;
    position: static;
    opacity: 1;
    display: block;
    background-position: right 10px center !important;
    border-radius: 3px;
    border: 1px solid #000;
    font-size: 16px;
    float: left;
    width: 200px;
    min-height: 25px;
    height: 25px;
    padding: 0 25px 0 3px;
    margin: 0;
    color: #000;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .custom_bundle_product_handle {
  }
{% endstyle %}
